-- VHDL code for an 8-bit Shift Register

-- Entity declaration
entity shift_register is
    Port (
        CLK   : in  std_logic;            -- Clock input
        SHIFT : in  std_logic;            -- Shift direction control input ('1' for right shift, '0' for left shift)
        RESET : in  std_logic;            -- Reset input ('1' for active high reset)
        D_IN  : in  std_logic_vector(7 downto 0);  -- Data input (8 bits)
        D_OUT : out std_logic_vector(7 downto 0)   -- Data output (8 bits)
    );
end shift_register;

-- Architecture implementation
architecture behavioral of shift_register is
    signal reg : std_logic_vector(7 downto 0);  -- Internal register for storing data
    
begin
    process (CLK, RESET)
    begin
        if RESET = '1' then
            reg <= (others => '0');  -- Reset register on active high reset
        elsif rising_edge(CLK) then
            if SHIFT = '1' then
                -- Right shift operation
                reg(0) <= reg(7);  -- Shift in MSB from reg(7)
                reg(7 downto 1) <= reg(6 downto 0);  -- Shift data to the right
            else
                -- Left shift operation
                reg(7) <= reg(0);  -- Shift in LSB from reg(0)
                reg(6 downto 0) <= reg(7 downto 1);  -- Shift data to the left
            end if;
        end if;
    end process;
    
    -- Output the shifted data
    D_OUT <= reg;
    
end behavioral;
